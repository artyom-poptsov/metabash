[[./doc/logo.png]]

* Metabash
GNU Guile module for running distributed shell pipelines.

** License
   Metabash is free software: you can redistribute it and/or modify it under the
   terms of the GNU General Public License as published by the Free Software
   Foundation, either version 3 of the License, or (at your option) any later
   version. Please see =COPYING= file for the terms of GNU General Public
   License.

   The logo (=doc/logo.svg= and rasterised versions) is distributed
   under terms of [[https://creativecommons.org/licenses/by-sa/4.0/][Creative Commons Attribution-ShareAlike 4.0
   International]] license.

** Requirements
   - GNU Guile 2.2+
   - Guile-SSH 0.13.0+

** Installation
#+BEGIN_EXAMPLE shell
$ autoreconf -vif
$ ./configure
$ make install
#+END_EXAMPLE

** Example
#+BEGIN_EXAMPLE lisp
(use-modules (ssh session)
             (ssh auth)
             (oop goops)
             (metabash pipe)
             (metabash process)
             (metabash plumber))

;; Create a Guile-SSH session:
(define session (make-session #:host "example.org"))

;; Connect to the remote host:
(connect! session)

;; Authenticate with the host using the SSH Agent:
(userauth-agent! session)

(let* ((pipeline (plumb
                   ;; This commands runs on a remote host
                   `(remote ,session "cat /etc/passwd")
                   ;; This commands runs on the local host
                   `(local "sort")
                   ;; This command runs on the local host as well,
                   ;; but this time it's a Guile process
                   `(guile #f
                            (begin
                              (use-modules (ice-9 rdelim))
                              (let loop ((line (read-line)))
                                (if (eof-object? line)
                                  (exit)
                                  (begin
                                    (write-line (string-join (string-split line #\:) ","))
                                    (loop (read-line)))))))))
       ;; Plumber will connect output of the 1st (remote) command
       ;; with the input of the 2nd (local) command with a pipe.
       ;; The list of commands passed to the plumber can be arbitrary
       ;; long.
       ;;
       ;; To read data from the pipeline, we connect the pipeline output
       ;; with the current output port:
       (pipe     (make <pipe> 
                       #:input-port (pipeline-output-port pipeline)
                       #:output-port (current-output-port))))
  (while #t
    (sleep 1)))
#+END_EXAMPLE

The plumbing can be done with =M#!= macro which adds some syntactic sugar upon
the =plumb= command:

#+BEGIN_EXAMPLE lisp
(use-modules (oop goops)
             (ssh session)
             (ssh auth)
             (metabash plumber)
             (metabash pipe))

(define (main args)
  (define session (make-session #:host "example.org"))
  (connect! session)
  (userauth-agent! session)
  (let ((pipeline (M#! remote session "cat /etc/passwd"
                       => local "sort"
                       => local "grep avp")))

    (let ((pipe (make <pipe>
                  #:input-port    (pipeline-output-port pipeline)
                  #:output-port   (current-output-port)
                  #:on-disconnect (lambda (pipe)
                                    (pipe-close! pipe)
                                    (disconnect! session)))))
      (pipe-connect! pipe)
      (while (pipe-connected? pipe)
        (sleep 1)))))
#+END_EXAMPLE
